fn main() { 
    /* 1.变量 */
    let a = 12;
    let b = 11;
    // Rust 是强类型语言，但具有自动判断变量类型的能力
    // a = "abc";
    // a = 4.56; 
    // a = 456;
    print!("a is {} ", a);
    println!("a is {0}, a again is {0}, b is {1}", a, b); //！是宏

    /* 2.常量与不可变变量的区别 */
    let mut n = 7; // 可以编译，但可能有警告，因为该变量没有被使用
    n = 8;
    println!("n is {}", n);

    const C: i32 = 123; //常量必须大写
    // let c = 456; 常量重新赋值则不合法
    println!("C is {}", C);

    let d: u64 = 123; // 这里声明了 d 为无符号 64 位整型变量，如果没有声明类型，d 将自动被判断为有符号 32 位整型变量，这对于 d 的取值范围有很大的影响。
    println!("d is {}", d);
    
    /* 3.重影,重影就是刚才讲述的所谓重新绑定 */
    let x = 5;
    let x = x + 1;
    let x = x * 2;
    println!("The value of x is: {}", x);

    // 重影与可变变量的赋值不是一个概念，重影是指用同一个名字重新代表另一个变量实体，其类型、可变属性和值都可以变化。但可变变量赋值仅能发生值的变化。
    let mut s = "123";
    s = s.len();
    
    /*
     * 整数型（Integer）
     * /

}